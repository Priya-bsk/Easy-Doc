/*********
 .jsw file
 *********

 Backend .jsw files contain functions that run on the server side but can be called from page code and frontend files.
 Use backend functions to keep code private and hidden from a user's browser. More info:

 https://support.wix.com/en/article/velo-web-modules-calling-backend-code-from-the-frontend

**********/

/*** Call the sample multiply function below by copying the following into your page code:

 import { multiply } from 'backend/multiplication';

 $w.onReady(function () {
     multiply(4, 5).then(product => {
         console.log(product);
     })
     .catch(error => {
         console.log(error);
     });
 });

***/

// Sample backend code in a multiplication.jsw file:

import wixData from 'wix-data';

// Function to lock the time slot and schedule a removal after 2 minutes
export async function lockSlot(doctorName, appointmentDate, appointmentTime) {
    // Lock the time slot in the "multi" collection
    const lockDetails = {
        doctorname: doctorName,
        appointmentdate: appointmentDate,
        appointmenttime: appointmentTime,
        isLocked: true
    };

    try {
        const insertedLock = await wixData.insert("multi", lockDetails);
        console.log("Slot locked successfully:", insertedLock);

        // Set a timer to remove the lock after 2 minutes (120,000 milliseconds)
        setTimeout(async () => {
            try {
                // Query to find and unlock the time slot
                const result = await wixData.query("multi")
                    .eq("doctorname", doctorName)
                    .eq("appointmentdate", appointmentDate)
                    .eq("appointmenttime", appointmentTime)
                    .find();

                if (result.items.length > 0) {
                    // Unlock by updating the `isLocked` field to false
                    const lockItem = result.items[0];
                    lockItem.isLocked = false;
                    await wixData.update("multi", lockItem);
                    console.log("Lock removed after 2 minutes for:", doctorName, appointmentDate, appointmentTime);
                }
            } catch (error) {
                console.error("Error removing lock after timeout:", error);
            }
        }, 300000); // 300000 milliseconds = 5 minutes

        return { success: true, message: "Slot locked successfully, and unlock scheduled." };
    } catch (error) {
        console.error("Error locking slot:", error);
        return { success: false, message: "Error locking slot.", error };
    }
}
